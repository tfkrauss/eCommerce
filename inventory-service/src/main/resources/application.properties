spring.application.name=inventory-service
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3316/inventory_service
spring.datasource.username=root
spring.datasource.password=mysql
spring.jpa.hibernate.ddl-auto=none
server.port=8082
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs


# Kafka Broker (your Kafka broker URL, change as per your setup)
spring.kafka.bootstrap-servers=localhost:9092
# Consumer Group ID (this should be unique for the inventory service)
spring.kafka.consumer.group-id=inventory-group

# Auto offset reset, used when there is no initial offset
spring.kafka.consumer.auto-offset-reset=earliest

# Key and Value Deserializers
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Producer Properties (if your inventory-service also acts as a producer, for example sending confirmation messages)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Kafka Topic (this is the topic for OrderPlacedEvent, same as in order-service)
kafka.topic.orderPlaced=order_placed_topic
kafka.topic.stockInsufficient = stock-insufficient-topic